// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  galleries    Gallery[]
  blogPosts    BlogPost[]
  testimonials Testimonial[]
  orders       Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Gallery Models
model Gallery {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  category    GalleryCategory
  isActive    Boolean        @default(true)
  isFeatured  Boolean        @default(false)
  order       Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  authorId    String?
  
  author User?   @relation(fields: [authorId], references: [id])
  images Image[]

  @@map("galleries")
}

model Image {
  id           String   @id @default(cuid())
  title        String?
  description  String?  @db.Text
  url          String
  cloudinaryId String?
  width        Int?
  height       Int?
  size         Int?     // File size in bytes
  format       String?  // jpg, png, webp, etc.
  isActive     Boolean  @default(true)
  isFeatured   Boolean  @default(false)
  order        Int      @default(0)
  tags         String[] // Array of tags
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  galleryId    String?

  gallery Gallery? @relation(fields: [galleryId], references: [id], onDelete: SetNull)

  @@map("images")
}

// Blog Models
model BlogPost {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  excerpt     String?       @db.Text
  content     String        @db.Text
  featuredImage String?
  status      PostStatus    @default(DRAFT)
  isPublished Boolean       @default(false)
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  authorId    String?
  categoryId  String?

  author     User?         @relation(fields: [authorId], references: [id])
  category   BlogCategory? @relation(fields: [categoryId], references: [id])
  tags       Tag[]
  comments   Comment[]

  @@map("blog_posts")
}

model BlogCategory {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String? @db.Text
  color       String? // Hex color for UI
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts BlogPost[]

  @@map("blog_categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  color     String?  // Hex color for UI
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts BlogPost[]

  @@map("tags")
}

model Comment {
  id        String        @id @default(cuid())
  content   String        @db.Text
  author    String
  email     String
  website   String?
  status    CommentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  postId    String

  post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// Contact & Lead Models
model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String        @db.Text
  status    ContactStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("contacts")
}

// Testimonial Models
model Testimonial {
  id        String   @id @default(cuid())
  name      String
  email     String?
  company   String?
  rating    Int      @default(5) // 1-5 stars
  content   String   @db.Text
  image     String?
  isActive  Boolean  @default(true)
  isFeatured Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String?

  author User? @relation(fields: [authorId], references: [id])

  @@map("testimonials")
}

// E-commerce Models (for Buy section)
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  customerName String
  customerEmail String
  customerPhone String?
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  notes       String?     @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String?

  user  User?       @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  productName String
  quantity    Int     @default(1)
  price       Decimal @db.Decimal(10, 2)
  orderId     String

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

// Settings Models
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  type      String   @default("string") // string, number, boolean, json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// SEO Models
model SeoPage {
  id          String   @id @default(cuid())
  page        String   @unique // home, gallery, portfolio, etc.
  title       String?
  description String?  @db.Text
  keywords    String?  @db.Text
  ogImage     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("seo_pages")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum GalleryCategory {
  WEDDING
  PORTRAIT
  EVENT
  COMMERCIAL
  NATURE
  FASHION
  TRAVEL
  STREET
  ARCHITECTURE
  OTHER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}